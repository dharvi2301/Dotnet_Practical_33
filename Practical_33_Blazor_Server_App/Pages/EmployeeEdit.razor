@page "/employee/edit/{id:int}"
@using Practical_33_Blazor_Server_App.Model
@using Practical_33_Blazor_Server_App.Repository
@inject IEmployeeRepository employeeRepo
@inject NavigationManager Navigation
@inject IJSRuntime js

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header bg-warning text-white">
            <h3 class="mb-0">Edit Employee</h3>
        </div>
        <div class="card-body">

            @if (employee == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <EditForm Model="@employee" OnValidSubmit="UpdateEmployee">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="employee.Name" />
                        <ValidationMessage For="@(() => employee.Name)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="employee.Email" />
                        <ValidationMessage For="@(() => employee.Email)" />
                    </div>

                    <div class="mb-3">
                        <label>Department</label>
                        <InputSelect class="form-control" @bind-Value="employee.Department">
                            <option value="">-- Select Department --</option>
                            @foreach (var dept in Departments)
                            {
                                <option value="@dept">@dept</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => employee.Department)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Salary</label>
                        <InputNumber class="form-control" @bind-Value="employee.Salary" />
                        <ValidationMessage For="@(() => employee.Salary)" />
                    </div>

                    <div class="d-flex justify-content-end">
                        <button class="btn btn-success me-2" type="submit">
                            <i class="bi bi-check-circle"></i> Update
                        </button>
                        <button class="btn btn-secondary" type="button" @onclick="GoBack">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </EditForm>
            }

        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private EmployeeModel employee;
    private List<string> Departments = new List<string>
    {
        "HR",
        "IT",
        "Sales",
        "Marketing",
        "Finance"
    };

    protected override void OnInitialized()
    {
        employee = employeeRepo.GetEmployeeById(id);
    }

    private async Task UpdateEmployee()
    {
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to update {employee.Name}?");
        if (confirm)
        {
            employeeRepo.UpdateEmployee(employee);
            Navigation.NavigateTo("/");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}
